datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Essay {
    id       String @id @default(cuid())
    question String @db.Text
    content  String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    evaluation Evaluation?

    @@index([createdById])
}

model Evaluation {
    id                     Int    @id @default(autoincrement())
    grammarScore           Float
    grammarComment         String @db.Text
    coherenceScore         Float
    coherenceComment       String @db.Text
    lexicalResourceScore   Float
    lexicalResourceComment String @db.Text
    taskAchievementScore   Float
    taskAchievementComment String @db.Text
    overallSuggestion      String @db.Text

    essayId String @unique
    essay   Essay  @relation(fields: [essayId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Essay[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
